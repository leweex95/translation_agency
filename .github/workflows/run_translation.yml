# ⚠️ SECURITY WARNING: Never add 'pull_request' triggers to this workflow!
# Self-hosted runners in public repos are vulnerable to malicious PRs from forks.
# Only use 'workflow_dispatch' for manual control and restrict to specific actors.
# See: https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#considering-cross-repository-access

name: AI translation pipeline

on:
  workflow_dispatch:
    inputs:
      local_file_path:
        description: 'Absolute path to the document to translate on your local machine'
        required: true
        type: string
        default: 'C:\Users\csibi\Desktop\document.pdf'

      translation_style:
        description: 'Translation style'
        required: false
        type: choice
        default: 'professional'
        options:
          - professional
          - casual
          - academic
          - creative
          - technical

      target_language:
        description: 'Target language'
        required: false
        type: string
        default: 'hungarian'

      disable_steps:
        description: 'Validation steps to disable (comma-separated: grammar,style,accuracy,hallucination,consistency,crossllm)'
        required: false
        type: string
        default: ''

jobs:
  translate:
    if: github.actor == 'leweex95'
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate local file
      id: validate-file
      shell: pwsh
      run: |
        $INPUT_FILE = "${{ github.event.inputs.local_file_path }}"
        if (-not (Test-Path $INPUT_FILE)) {
          Write-Error "Error: Local file '$INPUT_FILE' not found"
          exit 1
        }
        Write-Host "Local file found: $INPUT_FILE"
        echo "input_file=$INPUT_FILE" >> $env:GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    
    - name: Install dependencies
      shell: pwsh
      run: |
        poetry install
    
    - name: Prepare output directory
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "output/github-actions" | Out-Null
        Write-Host "Output directory created: output/github-actions"
    
    - name: Build CLI command
      id: build-command
      shell: pwsh
      run: |
        $INPUT_FILE = "${{ steps.validate-file.outputs.input_file }}"
        $CMD = "poetry run python -m src.translation_agency.main"
        $CMD = "$CMD '$INPUT_FILE'"
        $CMD = "$CMD --style '${{ github.event.inputs.translation_style }}'"
        $CMD = "$CMD --target-language '${{ github.event.inputs.target_language }}'"

        # Add disabled steps if specified
        if ("${{ github.event.inputs.disable_steps }}" -ne "") {
          $STEPS = "${{ github.event.inputs.disable_steps }}" -split ","
          foreach ($step in $STEPS) {
            $CMD = "$CMD --disable-steps '$step'"
          }
        }

        Write-Host "Command: $CMD"
        echo "command=$CMD" >> $env:GITHUB_OUTPUT
    
    - name: Run translation pipeline
      id: translate
      shell: pwsh
      run: |
        Write-Host "Starting translation pipeline..."
        
        # Run the pipeline
        $command = "${{ steps.build-command.outputs.command }}"
        try {
          Invoke-Expression $command
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Translation completed successfully!"
            echo "success=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Translation failed!"
            echo "success=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
        } catch {
          Write-Host "Translation failed with error: $_"
          echo "success=false" >> $env:GITHUB_OUTPUT
          exit 1
        }
    
    - name: List output files
      if: always()
      shell: pwsh
      run: |
        Write-Host "Generated files:"
        if (Test-Path "output/github-actions") {
          Get-ChildItem "output/github-actions" -File | Where-Object { $_.Name -like "*.txt" -or $_.Name -like "*.md" -or $_.Name -like "*.docx" } | Sort-Object Name | ForEach-Object { $_.Name }
        } else {
          Write-Host "No output directory found"
        }
    
    - name: Get output file info
      id: output-info
      if: steps.translate.outputs.success == 'true'
      shell: pwsh
      run: |
        $INPUT_FILE = "${{ github.event.inputs.local_file_path }}"
        $BASENAME = [System.IO.Path]::GetFileNameWithoutExtension($INPUT_FILE)
        $OUTPUT_FILE = "output/github-actions/final_translation_$BASENAME"
        
        if (Test-Path $OUTPUT_FILE) {
          echo "output_file=$OUTPUT_FILE" >> $env:GITHUB_OUTPUT
          Write-Host "Final translation: $OUTPUT_FILE"
          
          # Get file size
          $SIZE = (Get-Item $OUTPUT_FILE).Length
          echo "file_size=$SIZE" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "Expected output file not found: $OUTPUT_FILE"
          exit 1
        }
    
    - name: Upload translation results
      if: steps.translate.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: translation-results-${{ github.run_id }}
        path: |
          output/github-actions/
          !output/github-actions/step*.txt
          !output/github-actions/step*.md
          !output/github-actions/step*.docx
        retention-days: 30
    
    - name: Upload intermediate results
      if: steps.translate.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: intermediate-results-${{ github.run_id }}
        path: |
          output/github-actions/step*.txt
          output/github-actions/step*.md
          output/github-actions/step*.docx
        retention-days: 7
    
    - name: Create job summary
      if: always()
      shell: pwsh
      run: |
        "# AI Translation Pipeline Results" >> $env:GITHUB_STEP_SUMMARY
        "" >> $env:GITHUB_STEP_SUMMARY
        
        if ("${{ steps.translate.outputs.success }}" -eq "true") {
          "## Translation Successful" >> $env:GITHUB_STEP_SUMMARY
          "" >> $env:GITHUB_STEP_SUMMARY
          "| Parameter | Value |" >> $env:GITHUB_STEP_SUMMARY
          "|-----------|-------|" >> $env:GITHUB_STEP_SUMMARY
          "| Input Document | `${{ github.event.inputs.local_file_path }}` |" >> $env:GITHUB_STEP_SUMMARY
          "| Translation Style | ${{ github.event.inputs.translation_style }} |" >> $env:GITHUB_STEP_SUMMARY
          "| Target Language | ${{ github.event.inputs.target_language }} |" >> $env:GITHUB_STEP_SUMMARY
          
          if ("${{ steps.output-info.outputs.output_file }}" -ne "") {
            "| Output File | `${{ steps.output-info.outputs.output_file }}` |" >> $env:GITHUB_STEP_SUMMARY
            "| File Size | ${{ steps.output-info.outputs.file_size }} bytes |" >> $env:GITHUB_STEP_SUMMARY
          }
          
          "" >> $env:GITHUB_STEP_SUMMARY
          "Download Results: Check the 'Artifacts' section above to download the translated document and intermediate results." >> $env:GITHUB_STEP_SUMMARY
        } else {
          "## Translation Failed" >> $env:GITHUB_STEP_SUMMARY
          "" >> $env:GITHUB_STEP_SUMMARY
          "The translation pipeline encountered an error. Please check the job logs for details." >> $env:GITHUB_STEP_SUMMARY
          "" >> $env:GITHUB_STEP_SUMMARY
          "| Parameter | Value |" >> $env:GITHUB_STEP_SUMMARY
          "|-----------|-------|" >> $env:GITHUB_STEP_SUMMARY
          "| Input Document | `${{ github.event.inputs.local_file_path }}` |" >> $env:GITHUB_STEP_SUMMARY
        }

  push-artifacts:
    runs-on: self-hosted
    needs: translate
    if: needs.translate.result == 'success'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        name: translation-results-${{ github.run_id }}
        path: output/

    - name: Download intermediate artifacts
      uses: actions/download-artifact@v5
      with:
        name: intermediate-results-${{ github.run_id }}
        path: output/

    - name: Check for changes
      id: check_changes
      shell: pwsh
      run: |
        Write-Host "Checking for changes in output directory..."
        if (-not (git diff --quiet -- "output/")) {
          echo "changes_detected=true" >> $env:GITHUB_OUTPUT
          Write-Host "New translation outputs detected"
          git add output/
          git status
        } else {
          echo "changes_detected=false" >> $env:GITHUB_OUTPUT
          Write-Host "No new translation outputs to commit"
        }

    - name: Commit and push translation results
      if: steps.check_changes.outputs.changes_detected == 'true'
      shell: pwsh
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        $BRANCH = git rev-parse --abbrev-ref HEAD
        $INPUT_FILE = "${{ github.event.inputs.local_file_path }}"
        $BASENAME = [System.IO.Path]::GetFileNameWithoutExtension($INPUT_FILE)
        
        git add output/
        git commit -m "[Auto-commit] Translation results: $BASENAME [skip ci]"
        
        $RETRIES = 10
        $SUCCESS = 0
        for ($i = 1; $i -le $RETRIES; $i++) {
          git fetch origin "$BRANCH"
          git pull --rebase origin "$BRANCH" 2>$null; if ($LASTEXITCODE -ne 0) { git merge origin/"$BRANCH" }
          $pushResult = git push "https://x-access-token:$env:PAT_TOKEN@github.com/${{ github.repository }} HEAD:$BRANCH"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Successfully pushed translation results!"
            $SUCCESS = 1
            break
          } else {
            Write-Host "Push failed, retrying ($i/$RETRIES)..."
            Start-Sleep -Seconds 3
          }
        }
        
        if ($SUCCESS -ne 1) {
          Write-Host "ERROR: Failed to push after $RETRIES attempts."
          exit 1
        }