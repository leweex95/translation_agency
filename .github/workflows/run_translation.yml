# [SECURITY WARNING] Never add 'pull_request' triggers to this workflow!
# Self-hosted runners in public repos are vulnerable to malicious PRs from forks.
# Only use 'workflow_dispatch' for manual control and restrict to specific actors.
# See: https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#considering-cross-repository-access

name: AI translation pipeline

on:
  workflow_dispatch:
    inputs:
      local_file_path:
        description: 'Absolute path to the document to translate on your local machine'
        required: true
        type: string
        default: 'C:\Users\csibi\Desktop\sample_doc.pdf'

      translation_style:
        description: 'Translation style'
        required: false
        type: choice
        default: 'professional'
        options:
          - professional
          - casual
          - academic
          - creative
          - technical

      target_language:
        description: 'Target language'
        required: false
        type: string
        default: 'hungarian'

      disable_steps:
        description: 'Validation steps to disable (comma-separated: grammar,style,accuracy,hallucination,consistency,crossllm)'
        required: false
        type: string
        default: ''

jobs:
  translate:
    if: github.actor == 'leweex95'
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Validate local file
      id: validate-file
      shell: powershell
      run: |
        $INPUT_FILE = "${{ github.event.inputs.local_file_path }}"
        if (-not (Test-Path $INPUT_FILE)) {
          Write-Error "Error: Local file '$INPUT_FILE' not found"
          exit 1
        }
        Write-Host "Local file found: $INPUT_FILE"
        echo "input_file=$INPUT_FILE" >> $env:GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    
    - name: Install dependencies
      shell: powershell
      run: |
        poetry install
    
    - name: Prepare environment and build command
      id: prepare-env
      shell: powershell
      run: |
        $INPUT_FILE = "${{ steps.validate-file.outputs.input_file }}"
        Write-Host "DEBUG: INPUT_FILE = $INPUT_FILE"
        $BASENAME = [System.IO.Path]::GetFileNameWithoutExtension($INPUT_FILE)
        $TIMESTAMP = (Get-Date).ToString("yyyyMMdd_HHmmss")
        if (-not $TIMESTAMP) {
          Write-Error "Failed to generate timestamp"
          exit 1
        }
        $OUTPUT_DIR = "output/" + $TIMESTAMP + "_" + $BASENAME
        Write-Host "DEBUG: TIMESTAMP = $TIMESTAMP"
        Write-Host "DEBUG: BASENAME = $BASENAME"
        Write-Host "DEBUG: OUTPUT_DIR = $OUTPUT_DIR"
        New-Item -ItemType Directory -Force -Path $OUTPUT_DIR
        Write-Host "Output directory created: $OUTPUT_DIR"
        echo "output_dir=$OUTPUT_DIR" >> $env:GITHUB_OUTPUT
        echo "basename=$BASENAME" >> $env:GITHUB_OUTPUT
        
        $CMD = "poetry run python -m src.translation_agency.main"
        $CMD = "$CMD '$INPUT_FILE'"
        $CMD = "$CMD --style '${{ github.event.inputs.translation_style }}'"
        $CMD = "$CMD --target-language '${{ github.event.inputs.target_language }}'"
        $CMD = "$CMD --output-dir '$OUTPUT_DIR'"

        if ("${{ github.event.inputs.disable_steps }}" -ne "") {
          $DISABLED_STEPS = "${{ github.event.inputs.disable_steps }}"
          Write-Host "Raw disable_steps input: '$DISABLED_STEPS'"
          $STEPS = $DISABLED_STEPS -split "," | ForEach-Object { $_.Trim() }
          Write-Host "Parsed steps: $($STEPS -join ', ')"
          $CMD = "$CMD --disable-steps $($STEPS -join ' ')"
        }

        Write-Host "Command: $CMD"
        echo "command=$CMD" >> $env:GITHUB_OUTPUT
    
    - name: Run translation pipeline
      id: translate
      shell: powershell
      run: |
        Write-Host "Starting translation pipeline..."
        
        # Run the pipeline
        $command = "${{ steps.prepare-env.outputs.command }}"
        try {
          Invoke-Expression $command
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Translation completed successfully!"
            echo "success=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "Translation failed!"
            echo "success=false" >> $env:GITHUB_OUTPUT
            exit 1
          }
        } catch {
          Write-Host "Translation failed with error: $_"
          echo "success=false" >> $env:GITHUB_OUTPUT
          exit 1
        }
    
    - name: Get output file info
      id: output-info
      if: steps.translate.outputs.success == 'true'
      shell: powershell
      run: |
        $INPUT_FILE = "${{ steps.validate-file.outputs.input_file }}"
        $BASENAME = "${{ steps.prepare-env.outputs.basename }}"
        $DISABLED_STEPS = "${{ github.event.inputs.disable_steps }}"
        
        # Determine the final validation step based on disabled steps
        $all_steps = @("grammar", "style", "accuracy", "hallucination", "consistency", "crossllm")
        $disabled_array = $DISABLED_STEPS -split "," | ForEach-Object { $_.Trim() }
        $enabled_steps = $all_steps | Where-Object { $_ -notin $disabled_array }
        
        Write-Host "All steps: $($all_steps -join ', ')"
        Write-Host "Disabled steps: $($disabled_array -join ', ')"
        Write-Host "Enabled steps: $($enabled_steps -join ', ')"
        
        # Find the highest step number that should exist
        $step_number = 1  # initial translation is step 1
        if ($enabled_steps.Count -gt 0) {
          $step_number += $enabled_steps.Count
          $OUTPUT_FILE = "${{ steps.prepare-env.outputs.output_dir }}/$BASENAME/step$($step_number)_$($enabled_steps[-1])_validation.txt"
        } else {
          # No validation steps enabled, use initial translation
          $OUTPUT_FILE = "${{ steps.prepare-env.outputs.output_dir }}/$BASENAME/step1_initial_translation.txt"
        }
        
        # If the expected file doesn't exist, try to find any validation file
        if (-not (Test-Path $OUTPUT_FILE)) {
          Write-Host "Expected output file not found: $OUTPUT_FILE"
          Write-Host "Looking for any available validation files..."
          
          $validation_files = Get-ChildItem "${{ steps.prepare-env.outputs.output_dir }}/$BASENAME" -Filter "step*_validation.txt" | 
            Sort-Object { [int]($_.Name -replace 'step(\d+).*', '$1') } -Descending
          
          if ($validation_files.Count -gt 0) {
            $OUTPUT_FILE = $validation_files[0].FullName
            Write-Host "Using latest available validation file: $OUTPUT_FILE"
          } else {
            Write-Host "No validation files found in output directory"
            if (Test-Path "${{ steps.prepare-env.outputs.output_dir }}") {
              Get-ChildItem "${{ steps.prepare-env.outputs.output_dir }}" -Recurse | ForEach-Object { $_.FullName }
            }
            exit 1
          }
        }
        
        echo "output_file=$OUTPUT_FILE" >> $env:GITHUB_OUTPUT
        Write-Host "Final translation: $OUTPUT_FILE"
        
        # Get file size
        $SIZE = (Get-Item $OUTPUT_FILE).Length
        echo "file_size=$SIZE" >> $env:GITHUB_OUTPUT
    
    - name: Upload translation results
      if: steps.translate.outputs.success == 'true'
      uses: actions/upload-artifact@v5
      with:
        name: translation-results-${{ github.run_id }}
        path: |
          ${{ steps.prepare-env.outputs.output_dir }}/
          !${{ steps.prepare-env.outputs.output_dir }}/step*.txt
          !${{ steps.prepare-env.outputs.output_dir }}/step*.md
          !${{ steps.prepare-env.outputs.output_dir }}/step*.docx
        retention-days: 30
    
    - name: Upload intermediate results
      if: steps.translate.outputs.success == 'true'
      uses: actions/upload-artifact@v5
      with:
        name: intermediate-results-${{ github.run_id }}
        path: |
          ${{ steps.prepare-env.outputs.output_dir }}/**/step*.txt
          ${{ steps.prepare-env.outputs.output_dir }}/**/step*.md
          ${{ steps.prepare-env.outputs.output_dir }}/**/step*.docx
        retention-days: 7
    
    - name: Create job summary
      if: always()
      shell: powershell
      run: |
        "# AI Translation Pipeline Results" >> $env:GITHUB_STEP_SUMMARY
        "" >> $env:GITHUB_STEP_SUMMARY
        
        if ("${{ steps.translate.outputs.success }}" -eq "true") {
          "## ✅ Translation Successful" >> $env:GITHUB_STEP_SUMMARY
        } else {
          "## ❌ Translation Failed" >> $env:GITHUB_STEP_SUMMARY
          "The translation pipeline encountered an error. Please check the job logs for details." >> $env:GITHUB_STEP_SUMMARY
          "" >> $env:GITHUB_STEP_SUMMARY
        }
        
        "| Parameter | Value |" >> $env:GITHUB_STEP_SUMMARY
        "|-----------|-------|" >> $env:GITHUB_STEP_SUMMARY
        "| Input Document | `${{ github.event.inputs.local_file_path }}` |" >> $env:GITHUB_STEP_SUMMARY
        "| Translation Style | ${{ github.event.inputs.translation_style }} |" >> $env:GITHUB_STEP_SUMMARY
        "| Target Language | ${{ github.event.inputs.target_language }} |" >> $env:GITHUB_STEP_SUMMARY
        "| Disabled Steps | ${{ github.event.inputs.disable_steps || 'None' }} |" >> $env:GITHUB_STEP_SUMMARY
        
        if ("${{ steps.translate.outputs.success }}" -eq "true" -and "${{ steps.output-info.outputs.output_file }}" -ne "") {
          "| Output File | `${{ steps.output-info.outputs.output_file }}` |" >> $env:GITHUB_STEP_SUMMARY
          "| File Size | ${{ steps.output-info.outputs.file_size }} bytes |" >> $env:GITHUB_STEP_SUMMARY
          "" >> $env:GITHUB_STEP_SUMMARY
          "Download Results: Check the 'Artifacts' section above to download the translated document and intermediate results." >> $env:GITHUB_STEP_SUMMARY
        }

  push-artifacts:
    runs-on: self-hosted
    needs: translate
    if: needs.translate.result == 'success'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        name: translation-results-${{ github.run_id }}
        path: output/

    - name: Download intermediate artifacts
      uses: actions/download-artifact@v5
      with:
        name: intermediate-results-${{ github.run_id }}
        path: output/

    - name: Check for changes
      id: check_changes
      shell: powershell
      run: |
        # Set error handling to continue on command failures
        $ErrorActionPreference = "Continue"
        $global:LASTEXITCODE = 0
        
        Write-Host "Checking for changes in output directory..."
        
        # Check for modified files - git diff returns 1 if changes exist, 0 if no changes
        git -c safe.directory="$PWD" diff --quiet -- "output/" 2>$null
        $diffExitCode = $LASTEXITCODE
        
        if ($diffExitCode -ne 0) {
          echo "changes_detected=true" >> $env:GITHUB_OUTPUT
          Write-Host "Modified files detected in output/"
        } else {
          # Check for untracked files
          $untracked = git -c safe.directory="$PWD" ls-files --others --exclude-standard -- "output/" 2>$null
          if ($untracked -and $untracked.Length -gt 0) {
            echo "changes_detected=true" >> $env:GITHUB_OUTPUT
            Write-Host "New untracked files detected in output/"
            Write-Host "Untracked files: $($untracked -join ', ')"
          } else {
            echo "changes_detected=false" >> $env:GITHUB_OUTPUT
            Write-Host "No new translation outputs to commit"
          }
        }
        
        # Reset exit code to ensure step succeeds
        $global:LASTEXITCODE = 0
        exit 0

    - name: Configure Git
      run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Commit and push translation results
      if: steps.check_changes.outputs.changes_detected == 'true'
      shell: powershell
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        # Set error handling to stop on real errors but continue on expected git failures
        $ErrorActionPreference = "Stop"
        
        try {
          $BRANCH = git -c safe.directory="$PWD" rev-parse --abbrev-ref HEAD
          $INPUT_FILE = "${{ github.event.inputs.local_file_path }}"
          $BASENAME = [System.IO.Path]::GetFileNameWithoutExtension($INPUT_FILE)
          
          Write-Host "Current branch: $BRANCH"
          Write-Host "Adding output files to git..."
          git -c safe.directory="$PWD" add output/
          
          Write-Host "Committing changes..."
          git -c safe.directory="$PWD" commit -m "[Auto-commit] Translation results: $BASENAME [skip ci]"
          
          Write-Host "Pushing to remote repository..."
          git -c safe.directory="$PWD" push "https://x-access-token:$env:PAT_TOKEN@github.com/${{ github.repository }}" $BRANCH
          
          Write-Host "Successfully committed and pushed translation results"
        }
        catch {
          Write-Host "Error during git operations: $($_.Exception.Message)"
          Write-Host "Git status:"
          git status
          throw $_
        }