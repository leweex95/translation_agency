name: AI translation pipeline

on:
  workflow_dispatch:
    inputs:
      input_document:
        description: 'Path to the document to translate (relative to repository root)'
        required: true
        type: string
        default: 'docs/sample_doc.pdf'
      
      translation_style:
        description: 'Translation style'
        required: false
        type: choice
        default: 'professional'
        options:
          - professional
          - casual
          - academic
          - creative
          - technical
      
      target_language:
        description: 'Target language'
        required: false
        type: string
        default: 'hungarian'
      
      disable_steps:
        description: 'Validation steps to disable (comma-separated: grammar,style,accuracy,hallucination,consistency,crossllm)'
        required: false
        type: string
        default: ''

jobs:
  translate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Validate input file
      run: |
        if [ ! -f "${{ inputs.input_document }}" ]; then
          echo "Error: Input file '${{ inputs.input_document }}' not found"
          exit 1
        fi
        echo "Input file found: ${{ inputs.input_document }}"
    
    - name: Prepare output directory
      run: |
        mkdir -p output/github-actions
        echo "Output directory created: output/github-actions"
    
    - name: Build CLI command
      id: build-command
      run: |
        CMD="poetry run python -m src.translation_agency.main"
        CMD="$CMD '${{ inputs.input_document }}'"
        CMD="$CMD --style '${{ inputs.translation_style }}'"
        CMD="$CMD --target-language '${{ inputs.target_language }}'"
        
        # Add disabled steps if specified
        if [ -n "${{ inputs.disable_steps }}" ]; then
          IFS=',' read -ra STEPS <<< "${{ inputs.disable_steps }}"
          for step in "${STEPS[@]}"; do
            CMD="$CMD --disable-steps '$step'"
          done
        fi
        
        echo "command=$CMD" >> $GITHUB_OUTPUT
        echo "Command: $CMD"
    
    - name: Run translation pipeline
      id: translate
      run: |
        echo "Starting translation pipeline..."
        
        # Run the pipeline
        if ${{ steps.build-command.outputs.command }}; then
          echo "Translation completed successfully!"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "Translation failed!"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: List output files
      if: always()
      run: |
        echo "Generated files:"
        if [ -d "output/github-actions" ]; then
          find output/github-actions -type f -name "*.txt" -o -name "*.md" -o -name "*.docx" | sort
        else
          echo "No output directory found"
        fi
    
    - name: Get output file info
      id: output-info
      if: steps.translate.outputs.success == 'true'
      run: |
        INPUT_FILE="${{ inputs.input_document }}"
        BASENAME=$(basename "$INPUT_FILE")
        OUTPUT_FILE="output/github-actions/final_translation_$BASENAME"
        
        if [ -f "$OUTPUT_FILE" ]; then
          echo "output_file=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          echo "Final translation: $OUTPUT_FILE"
          
          # Get file size
          SIZE=$(stat -c%s "$OUTPUT_FILE" 2>/dev/null || stat -f%z "$OUTPUT_FILE" 2>/dev/null || echo "unknown")
          echo "file_size=$SIZE" >> $GITHUB_OUTPUT
        else
          echo "Expected output file not found: $OUTPUT_FILE"
          exit 1
        fi
    
    - name: Upload translation results
      if: steps.translate.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: translation-results-${{ github.run_id }}
        path: |
          output/github-actions/
          !output/github-actions/step*.txt
          !output/github-actions/step*.md
          !output/github-actions/step*.docx
        retention-days: 30
    
    - name: Upload intermediate results
      if: steps.translate.outputs.success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: intermediate-results-${{ github.run_id }}
        path: |
          output/github-actions/step*.txt
          output/github-actions/step*.md
          output/github-actions/step*.docx
        retention-days: 7
    
    - name: Create job summary
      if: always()
      run: |
        echo "# AI Translation Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.translate.outputs.success }}" == "true" ]; then
          echo "## Translation Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Input Document | \`${{ inputs.input_document }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Translation Style | ${{ inputs.translation_style }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Target Language | ${{ inputs.target_language }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.output-info.outputs.output_file }}" ]; then
            echo "| Output File | \`${{ steps.output-info.outputs.output_file }}\` |" >> $GITHUB_STEP_SUMMARY
            echo "| File Size | ${{ steps.output-info.outputs.file_size }} bytes |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download Results: Check the 'Artifacts' section above to download the translated document and intermediate results." >> $GITHUB_STEP_SUMMARY
        else
          echo "## Translation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The translation pipeline encountered an error. Please check the job logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Input Document | \`${{ inputs.input_document }}\` |" >> $GITHUB_STEP_SUMMARY
        fi

  push-artifacts:
    runs-on: ubuntu-latest
    needs: translate
    if: needs.translate.outputs.success == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v5
      with:
        name: translation-results-${{ github.run_id }}
        path: output/

    - name: Download intermediate artifacts
      uses: actions/download-artifact@v5
      with:
        name: intermediate-results-${{ github.run_id }}
        path: output/

    - name: Check for changes
      id: check_changes
      run: |
        echo "Checking for changes in output directory..."
        if git diff --quiet -- output/; then
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "No new translation outputs to commit"
        else
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "New translation outputs detected"
          git add output/
          git status
        fi

    - name: Commit and push translation results
      if: steps.check_changes.outputs.changes_detected == 'true'
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        INPUT_FILE="${{ inputs.input_document }}"
        BASENAME=$(basename "$INPUT_FILE" | cut -d. -f1)
        
        git add output/
        git commit -m "[Auto-commit] Translation results: $BASENAME [skip ci]"
        
        RETRIES=10
        SUCCESS=0
        for i in $(seq 1 $RETRIES); do
          git fetch origin "$BRANCH"
          git pull --rebase origin "$BRANCH" || git merge origin/"$BRANCH"
          git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:$BRANCH && {
            echo "Successfully pushed translation results!"
            SUCCESS=1
            break
          } || {
            echo "Push failed, retrying ($i/$RETRIES)..."
            sleep 3
          }
        done
        
        if [ "$SUCCESS" -ne 1 ]; then
          echo "ERROR: Failed to push after $RETRIES attempts."
          exit 1
        fi